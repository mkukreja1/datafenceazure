trigger:
  branches:
    include:
    - main
    - devops-azure
  paths:
    include:
    - devops/cicd-code/*

variables:
  - group: 'df-cicd-code'

# Stages of Deployment

stages:
          
  - stage: Lakehouse_Linked_services
    jobs: 
      - job: DeployLinkedServices
        pool:
          vmImage: ubuntu-latest
        steps:
        - task: AzureResourceManagerTemplateDeployment@3
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: '$(SERVICE_CONNECTION)'
            subscriptionId: '$(SUBSCRIPTION_ID)'
            action: 'Create Or Update Resource Group'
            resourceGroupName: '$(RESOURCE_GROUP)'
            location: '$(REGION)'
            templateLocation: 'Linked artifact'
            csmFile: 'devops/cicd-code/electroniz_linked_services.json'
            overrideParameters: '-factoryName $(DATAFACTORY_NAME) -synapseStorageAccount $(LAKEHOUSE_STORAGE_ACCOUNT) -synapseStorageAccountFilesystem  $(LAKEHOUSE_GOLD_LAYER) -SynapseServerless_connectionString "$(SYNAPSE_CON_STRING)" -Curation_Spark_Cluster_accessToken "$(SPARK_CLUSTER_TOKEN)" -salesdbsource_connectionString "$(SQL_CON_STRING)" -websitetrackinglogs_connectionString "$(WEBSITE_LOGS_CON_STRING)"'
            deploymentMode: 'Incremental'
            deploymentName: 'dataFactoryDeployment'
            
  - stage: Lakehouse_Batch_Ingestion_Pipeline
    jobs: 
      - job: DeployBatchIngestionPipeline
        pool:
          vmImage: ubuntu-latest
        steps:
        - task: AzureResourceManagerTemplateDeployment@3
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: '$(SERVICE_CONNECTION)'
            subscriptionId: '$(SUBSCRIPTION_ID)'
            action: 'Create Or Update Resource Group'
            resourceGroupName: '$(RESOURCE_GROUP)'
            location: '$(REGION)'
            templateLocation: 'Linked artifact'
            csmFile: 'devops/cicd-code/electroniz_batch_ingestion_pipeline.json'
            overrideParameters: '-factoryName $(DATAFACTORY_NAME) -salesdbsource $(LAKEHOUSE_SALESDBSOURCE) -httpsource $(LAKEHOUSE_HTTPSOURCE) -traininglakehouse $(LAKEHOUSE_SOURCE) -websitetrackinglogs $(LAKEHOUSE_WEBTRACKING)  -restsource $(LAKEHOUSE_RESTSOURCE)'
            deploymentMode: 'Incremental'
            deploymentName: 'dataFactoryDeployment'

  - stage: Lakehouse_Batch_Curation_Pipeline
    jobs: 
      - job: DeployBatchCurationPipeline
        pool:
          vmImage: ubuntu-latest
        steps:
        - task: AzureResourceManagerTemplateDeployment@3
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: '$(SERVICE_CONNECTION)'
            subscriptionId: '$(SUBSCRIPTION_ID)'
            action: 'Create Or Update Resource Group'
            resourceGroupName: '$(RESOURCE_GROUP)'
            location: '$(REGION)'
            templateLocation: 'Linked artifact'
            csmFile: 'devops/cicd-code/electroniz_batch_curation_pipeline.json'
            overrideParameters: '-factoryName $(DATAFACTORY_NAME) -Curation_Spark_Cluster_accessToken "$(SPARK_CLUSTER_TOKEN)" -sasKey "$(ADLS_SECRET)" -databricksName "$(DATABRICKS_NAME)" -databricksCluster "$(DATABRICKS_CLUSTER)"'
            deploymentMode: 'Incremental'
            deploymentName: 'dataFactoryDeployment'

  - stage: Lakehouse_Aggregation_Pipeline
    jobs: 
      - job: DeployAggregationPipeline
        pool:
          vmImage: ubuntu-latest
        steps:
        - task: AzureResourceManagerTemplateDeployment@3
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: '$(SERVICE_CONNECTION)'
            subscriptionId: '$(SUBSCRIPTION_ID)'
            action: 'Create Or Update Resource Group'
            resourceGroupName: '$(RESOURCE_GROUP)'
            location: '$(REGION)'
            templateLocation: 'Linked artifact'
            csmFile: 'devops/cicd-code/electroniz_batch_aggregation_pipeline.json'
            overrideParameters: '-factoryName "$(DATAFACTORY_NAME)" -synapseStorageAccount "$(LAKEHOUSE_STORAGE_ACCOUNT)" -SynapseServerless_connectionString "$(SYNAPSE_CON_STRING)" -Curation_Spark_Cluster_accessToken "$(SPARK_CLUSTER_TOKEN)" -salesdbsource_connectionString "$(SQL_CON_STRING)" -websitetrackinglogs_connectionString "$(LAKEHOUSE_WEBTRACKING)"'
            deploymentMode: 'Incremental'
            deploymentName: 'dataFactoryDeployment'

  - stage: Lakehouse_Master_Pipeline
    jobs: 
      - job: DeployMasterPipeline
        pool:
          vmImage: ubuntu-latest
        steps:
        - task: AzureResourceManagerTemplateDeployment@3
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: '$(SERVICE_CONNECTION)'
            subscriptionId: '$(SUBSCRIPTION_ID)'
            action: 'Create Or Update Resource Group'
            resourceGroupName: '$(RESOURCE_GROUP)'
            location: '$(REGION)'
            templateLocation: 'Linked artifact'
            csmFile: 'devops/cicd-code/electroniz_master_pipeline.json'
            overrideParameters: '-factoryName $(DATAFACTORY_NAME)'
            deploymentMode: 'Incremental'
            deploymentName: 'dataFactoryDeployment'

  - stage: Lakehouse_Database_Scripts
    jobs: 
      - job: DeployDatabaseScripts
        pool:
          vmImage: ubuntu-latest
        steps:
        - task: AzureKeyVault@1
          inputs:
            azureSubscription: '$(SERVICE_CONNECTION)'                 
            keyVaultName: '$(KEY_VAULT_NAME)' 
            secretsFilter: '*' 
        - task: CmdLine@1
          displayName: Run Sqlcmd
          inputs:
            filename: sqlcmd
            arguments: '-S $(SYNAPSE_CON_STRING) -U $(SQLUSER) -P $(SQLPASSWORD) -i devops/cicd-code/sql/create_db.sql'
        - task: CmdLine@1
          displayName: Run Sqlcmd
          inputs:
            filename: sqlcmd
            arguments: '-S $(SYNAPSE_CON_STRING) -U $(SQLUSER) -P $(SQLPASSWORD) -i devops/cicd-code/sql/create_synapse_creds.sql'
        - task: CmdLine@1
          displayName: Run Sqlcmd
          inputs:
            filename: sqlcmd
            arguments: '-S $(SYNAPSE_CON_STRING) -U $(SQLUSER) -P $(SQLPASSWORD) -i devops/cicd-code/sql/create_silver_views.sql'
        - task: CmdLine@1
          displayName: Run Sqlcmd
          inputs:
            filename: sqlcmd
            arguments: '-S $(SYNAPSE_CON_STRING) -U $(SQLUSER) -P $(SQLPASSWORD) -i devops/cicd-code/sql/drop_gold_tables.sql'
        - task: CmdLine@1
          displayName: Run Sqlcmd
          inputs:
            filename: sqlcmd
            arguments: '-S $(SYNAPSE_CON_STRING) -U $(SQLUSER) -P $(SQLPASSWORD) -i devops/cicd-code/sql/create_gold_tables.sql'
          